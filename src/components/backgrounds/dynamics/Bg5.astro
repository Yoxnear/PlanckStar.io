---
// 1 Instruction in this component

// Start here adjusting the grid size (number of particles). ❶
const gridSizeX = 80;
const gridSizeY = 50;
---

<div id="dynamic-bg" data-gridx={gridSizeX} data-gridy={gridSizeY} class="w-full h-96" ></div>

<script>
import * as THREE from 'three';
import { contain } from 'three/src/extras/TextureUtils.js';

const container = document.getElementById('dynamic-bg');
const scene = new THREE.Scene();

const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
camera.position.z = 20;

const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
renderer.setPixelRatio(window.devicePixelRatio);
container.appendChild(renderer.domElement);

let gridX = container.dataset.gridx;
let gridY = container.dataset.gridy;
let particles = null;
let material = null;

function createParticles() {
   
    const vFOV = camera.fov * Math.PI / 180;
    const heightVisible = 2 * Math.tan(vFOV / 2) * camera.position.z;
    const widthVisible = heightVisible * camera.aspect;

    const positions = new Float32Array(gridX * gridY * 3);
    for (let y = 0; y < gridY; y++) {
        for (let x = 0; x < gridX; x++) {
            const i = (y * gridX + x) * 3;
            positions[i] = (x / (gridX - 1) - 0.5) * widthVisible;     
            positions[i + 1] = (y / (gridY - 1) - 0.5) * heightVisible; 
            positions[i + 2] = 0; 
        }
    }

    const geometry = new THREE.BufferGeometry();
    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));

    const vertexShader = `
    uniform vec2 uMouse;
    varying float vDist;

    void main() {
        vec3 pos = position;
        vec2 mouse3D = uMouse;
        float dist = distance(pos.xy, mouse3D);
        vDist = dist;

        // Hover: elevar partículas cercanas al cursor
        if(dist < 6.0){
          pos.z += (6.0 - dist) * 0.6;
        }

        gl_PointSize = 4.0;
        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.0);
    }`;

    const fragmentShader = `
    varying float vDist;

    void main() {
        vec2 uv = gl_PointCoord - vec2(0.5);
        if(length(uv) > 0.5) discard;

        vec3 baseColor = vec3(0.05, 0.05, 0.2);
        vec3 highlight = vec3(0.3, 0.6, 1.0);
        float intensity = smoothstep(0.0, 5.0, 5.0 - vDist);
        vec3 color = mix(baseColor, highlight, intensity);

        gl_FragColor = vec4(color, 0.9);
    }`;

    material = new THREE.ShaderMaterial({
        vertexShader,
        fragmentShader,
        uniforms: { uMouse: { value: new THREE.Vector2(0,0) } },
        transparent: true
    });

    if (particles) scene.remove(particles);
    particles = new THREE.Points(geometry, material);
    scene.add(particles);
}

createParticles();

const mouse = new THREE.Vector2();
const vector = new THREE.Vector3();

container.addEventListener('mousemove', (event) => {
    const rect = container.getBoundingClientRect();
    mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
    mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;

    vector.set(mouse.x, mouse.y, 0.5);
    vector.unproject(camera);
    const dir = vector.sub(camera.position).normalize();
    const distance = -camera.position.z / dir.z;
    const pos = camera.position.clone().add(dir.multiplyScalar(distance));

    material.uniforms.uMouse.value.set(pos.x, pos.y);
});

function animate() {
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
}
animate();

function resize() {
    renderer.setSize(container.clientWidth, container.clientHeight);
    camera.aspect = container.clientWidth / container.clientHeight;
    camera.updateProjectionMatrix();
    createParticles(); 
}
window.addEventListener('resize', resize);
resize();
</script>
