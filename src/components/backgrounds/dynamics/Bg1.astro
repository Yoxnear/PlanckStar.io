---
// 2 Instructions in this component

// Start here adjusting the number of particles. ❶
const numberParticles = 5000; 
---


<div id="three-container1" data-particles={numberParticles} class="w-full h-80">
</div>

<script>
    import * as THREE from 'three';

    const container = document.getElementById('three-container1');
    const particleCount = container.dataset.particles;

    const scene = new THREE.Scene();

    const width = container.clientWidth;
    const height = container.clientHeight;

    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);
    camera.position.z = 8; 

    const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
    renderer.setSize(width, height);
    renderer.setPixelRatio(window.devicePixelRatio);
    container.appendChild(renderer.domElement);

    const particlesGeometry = new THREE.BufferGeometry();
    const positions = new Float32Array(particleCount * 3);

    for (let i = 0; i < particleCount * 3; i += 3) {
        positions[i] = (Math.random() - 0.5) * 35; 
        positions[i + 1] = (Math.random() - 0.5) * 20; 
        positions[i + 2] = (Math.random() - 0.5) * 3; 
    }
    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));

    const vertexShader = `
        uniform float uTime;
        varying vec3 vPosition;
        void main() {
            vPosition = position;
            vec3 pos = position;

            pos.y += sin(pos.x * 0.4 + uTime * 0.5) * cos(pos.z * 0.4 + uTime * 0.4) * 0.5;

            gl_PointSize = 2.2; // Large particles
            gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);
        }
    `;
    // Here is where you can play with colors and effects. ❷ ----------------------------------------------------------------|
    const fragmentShader = `
        uniform float uTime;
        varying vec3 vPosition;
        void main() {

            // Dark colors with soft glow
            vec3 baseColor = vec3(0.014, 0.017, 0.1); // <---- Base black blue
            vec3 glowColor = vec3(0.34, 0.44, 0.85); // <---- Dark bluish glow
            float intensity = sin(uTime * 0.2 + vPosition.x * 0.2 + vPosition.y * 0.2) * 0.2 + 0.8;
            vec3 color = mix(baseColor, glowColor, intensity);
            gl_FragColor = vec4(color, 0.9); // <---- Transparency for softness

        }
    `;

    const particleMaterial = new THREE.ShaderMaterial({
        vertexShader,
        fragmentShader,
        uniforms: {
            uTime: { value: 0.0 }
        },
        transparent: true
    });

    const particleSystem = new THREE.Points(particlesGeometry, particleMaterial);
    scene.add(particleSystem);

    // Animation loop
    function animate() {
        requestAnimationFrame(animate);
        particleMaterial.uniforms.uTime.value += 0.05;
        renderer.render(scene, camera);
    }
    animate();

    // Handle resize
    window.addEventListener('resize', () => {
        const newWidth = container.clientWidth;
        const newHeight = container.clientHeight;
        renderer.setSize(newWidth, newHeight);
        camera.aspect = newWidth / newHeight;
        camera.updateProjectionMatrix();
    });

</script>